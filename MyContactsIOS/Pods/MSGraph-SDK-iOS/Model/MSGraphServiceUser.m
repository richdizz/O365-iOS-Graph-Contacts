/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Corporation. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphServiceModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSGraphServiceUser
 *
 */
@implementation MSGraphServiceUser


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"accountEnabled", @"accountEnabled", @"assignedLicenses", @"assignedLicenses", @"assignedPlans", @"assignedPlans", @"businessPhones", @"businessPhones", @"city", @"city", @"companyName", @"companyName", @"country", @"country", @"department", @"department", @"displayName", @"displayName", @"givenName", @"givenName", @"jobTitle", @"jobTitle", @"mail", @"mail", @"mailNickname", @"mailNickname", @"mobilePhone", @"mobilePhone", @"onPremisesImmutableId", @"onPremisesImmutableId", @"onPremisesLastSyncDateTime", @"onPremisesLastSyncDateTime", @"onPremisesSecurityIdentifier", @"onPremisesSecurityIdentifier", @"onPremisesSyncEnabled", @"onPremisesSyncEnabled", @"passwordPolicies", @"passwordPolicies", @"passwordProfile", @"passwordProfile", @"officeLocation", @"officeLocation", @"postalCode", @"postalCode", @"preferredLanguage", @"preferredLanguage", @"provisionedPlans", @"provisionedPlans", @"proxyAddresses", @"proxyAddresses", @"state", @"state", @"streetAddress", @"streetAddress", @"surname", @"surname", @"usageLocation", @"usageLocation", @"userPrincipalName", @"userPrincipalName", @"userType", @"userType", @"aboutMe", @"aboutMe", @"birthday", @"birthday", @"hireDate", @"hireDate", @"interests", @"interests", @"mySite", @"mySite", @"pastProjects", @"pastProjects", @"preferredName", @"preferredName", @"responsibilities", @"responsibilities", @"schools", @"schools", @"skills", @"skills", @"ownedDevices", @"ownedDevices", @"registeredDevices", @"registeredDevices", @"manager", @"manager", @"directReports", @"directReports", @"memberOf", @"memberOf", @"createdObjects", @"createdObjects", @"ownedObjects", @"ownedObjects", @"messages", @"messages", @"mailFolders", @"mailFolders", @"calendar", @"calendar", @"calendars", @"calendars", @"calendarGroups", @"calendarGroups", @"calendarView", @"calendarView", @"events", @"events", @"contacts", @"contacts", @"contactFolders", @"contactFolders", @"photo", @"photo", @"drive", @"drive", @"id", @"_id", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.user";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {
		_accountEnabled = (![dic objectForKey: @"accountEnabled"] || [ [dic objectForKey: @"accountEnabled"] isKindOfClass:[NSNull class]] )?_accountEnabled:[[dic objectForKey: @"accountEnabled"] boolValue];

        if([dic objectForKey: @"assignedLicenses"] != [NSNull null]){
            _assignedLicenses = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"assignedLicenses"]) {
                [_assignedLicenses addObject:[[MSGraphServiceAssignedLicense alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_assignedLicenses resetChangedFlag];
        }
        

        if([dic objectForKey: @"assignedPlans"] != [NSNull null]){
            _assignedPlans = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"assignedPlans"]) {
                [_assignedPlans addObject:[[MSGraphServiceAssignedPlan alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_assignedPlans resetChangedFlag];
        }
        

        if([dic objectForKey: @"businessPhones"] != [NSNull null]){
            _businessPhones = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"businessPhones"]) {
                [_businessPhones addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_businessPhones resetChangedFlag];
        }
        
		_city = (![dic objectForKey: @"city"] || [ [dic objectForKey: @"city"] isKindOfClass:[NSNull class]] )?_city:[[dic objectForKey: @"city"] copy];
		_companyName = (![dic objectForKey: @"companyName"] || [ [dic objectForKey: @"companyName"] isKindOfClass:[NSNull class]] )?_companyName:[[dic objectForKey: @"companyName"] copy];
		_country = (![dic objectForKey: @"country"] || [ [dic objectForKey: @"country"] isKindOfClass:[NSNull class]] )?_country:[[dic objectForKey: @"country"] copy];
		_department = (![dic objectForKey: @"department"] || [ [dic objectForKey: @"department"] isKindOfClass:[NSNull class]] )?_department:[[dic objectForKey: @"department"] copy];
		_displayName = (![dic objectForKey: @"displayName"] || [ [dic objectForKey: @"displayName"] isKindOfClass:[NSNull class]] )?_displayName:[[dic objectForKey: @"displayName"] copy];
		_givenName = (![dic objectForKey: @"givenName"] || [ [dic objectForKey: @"givenName"] isKindOfClass:[NSNull class]] )?_givenName:[[dic objectForKey: @"givenName"] copy];
		_jobTitle = (![dic objectForKey: @"jobTitle"] || [ [dic objectForKey: @"jobTitle"] isKindOfClass:[NSNull class]] )?_jobTitle:[[dic objectForKey: @"jobTitle"] copy];
		_mail = (![dic objectForKey: @"mail"] || [ [dic objectForKey: @"mail"] isKindOfClass:[NSNull class]] )?_mail:[[dic objectForKey: @"mail"] copy];
		_mailNickname = (![dic objectForKey: @"mailNickname"] || [ [dic objectForKey: @"mailNickname"] isKindOfClass:[NSNull class]] )?_mailNickname:[[dic objectForKey: @"mailNickname"] copy];
		_mobilePhone = (![dic objectForKey: @"mobilePhone"] || [ [dic objectForKey: @"mobilePhone"] isKindOfClass:[NSNull class]] )?_mobilePhone:[[dic objectForKey: @"mobilePhone"] copy];
		_onPremisesImmutableId = (![dic objectForKey: @"onPremisesImmutableId"] || [ [dic objectForKey: @"onPremisesImmutableId"] isKindOfClass:[NSNull class]] )?_onPremisesImmutableId:[[dic objectForKey: @"onPremisesImmutableId"] copy];
		_onPremisesLastSyncDateTime = (![dic objectForKey: @"onPremisesLastSyncDateTime"] || [ [dic objectForKey: @"onPremisesLastSyncDateTime"] isKindOfClass:[NSNull class]] )?_onPremisesLastSyncDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"onPremisesLastSyncDateTime"]];
		_onPremisesSecurityIdentifier = (![dic objectForKey: @"onPremisesSecurityIdentifier"] || [ [dic objectForKey: @"onPremisesSecurityIdentifier"] isKindOfClass:[NSNull class]] )?_onPremisesSecurityIdentifier:[[dic objectForKey: @"onPremisesSecurityIdentifier"] copy];
		_onPremisesSyncEnabled = (![dic objectForKey: @"onPremisesSyncEnabled"] || [ [dic objectForKey: @"onPremisesSyncEnabled"] isKindOfClass:[NSNull class]] )?_onPremisesSyncEnabled:[[dic objectForKey: @"onPremisesSyncEnabled"] boolValue];
		_passwordPolicies = (![dic objectForKey: @"passwordPolicies"] || [ [dic objectForKey: @"passwordPolicies"] isKindOfClass:[NSNull class]] )?_passwordPolicies:[[dic objectForKey: @"passwordPolicies"] copy];
		_passwordProfile = (![dic objectForKey: @"passwordProfile"] || [ [dic objectForKey: @"passwordProfile"] isKindOfClass:[NSNull class]] )?_passwordProfile:[[MSGraphServicePasswordProfile alloc] initWithDictionary: [dic objectForKey: @"passwordProfile"]];
		_officeLocation = (![dic objectForKey: @"officeLocation"] || [ [dic objectForKey: @"officeLocation"] isKindOfClass:[NSNull class]] )?_officeLocation:[[dic objectForKey: @"officeLocation"] copy];
		_postalCode = (![dic objectForKey: @"postalCode"] || [ [dic objectForKey: @"postalCode"] isKindOfClass:[NSNull class]] )?_postalCode:[[dic objectForKey: @"postalCode"] copy];
		_preferredLanguage = (![dic objectForKey: @"preferredLanguage"] || [ [dic objectForKey: @"preferredLanguage"] isKindOfClass:[NSNull class]] )?_preferredLanguage:[[dic objectForKey: @"preferredLanguage"] copy];

        if([dic objectForKey: @"provisionedPlans"] != [NSNull null]){
            _provisionedPlans = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"provisionedPlans"]) {
                [_provisionedPlans addObject:[[MSGraphServiceProvisionedPlan alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_provisionedPlans resetChangedFlag];
        }
        

        if([dic objectForKey: @"proxyAddresses"] != [NSNull null]){
            _proxyAddresses = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"proxyAddresses"]) {
                [_proxyAddresses addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_proxyAddresses resetChangedFlag];
        }
        
		_state = (![dic objectForKey: @"state"] || [ [dic objectForKey: @"state"] isKindOfClass:[NSNull class]] )?_state:[[dic objectForKey: @"state"] copy];
		_streetAddress = (![dic objectForKey: @"streetAddress"] || [ [dic objectForKey: @"streetAddress"] isKindOfClass:[NSNull class]] )?_streetAddress:[[dic objectForKey: @"streetAddress"] copy];
		_surname = (![dic objectForKey: @"surname"] || [ [dic objectForKey: @"surname"] isKindOfClass:[NSNull class]] )?_surname:[[dic objectForKey: @"surname"] copy];
		_usageLocation = (![dic objectForKey: @"usageLocation"] || [ [dic objectForKey: @"usageLocation"] isKindOfClass:[NSNull class]] )?_usageLocation:[[dic objectForKey: @"usageLocation"] copy];
		_userPrincipalName = (![dic objectForKey: @"userPrincipalName"] || [ [dic objectForKey: @"userPrincipalName"] isKindOfClass:[NSNull class]] )?_userPrincipalName:[[dic objectForKey: @"userPrincipalName"] copy];
		_userType = (![dic objectForKey: @"userType"] || [ [dic objectForKey: @"userType"] isKindOfClass:[NSNull class]] )?_userType:[[dic objectForKey: @"userType"] copy];
		_aboutMe = (![dic objectForKey: @"aboutMe"] || [ [dic objectForKey: @"aboutMe"] isKindOfClass:[NSNull class]] )?_aboutMe:[[dic objectForKey: @"aboutMe"] copy];
		_birthday = (![dic objectForKey: @"birthday"] || [ [dic objectForKey: @"birthday"] isKindOfClass:[NSNull class]] )?_birthday:[MSOrcObjectizer dateFromString:[dic objectForKey: @"birthday"]];
		_hireDate = (![dic objectForKey: @"hireDate"] || [ [dic objectForKey: @"hireDate"] isKindOfClass:[NSNull class]] )?_hireDate:[MSOrcObjectizer dateFromString:[dic objectForKey: @"hireDate"]];

        if([dic objectForKey: @"interests"] != [NSNull null]){
            _interests = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"interests"]) {
                [_interests addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_interests resetChangedFlag];
        }
        
		_mySite = (![dic objectForKey: @"mySite"] || [ [dic objectForKey: @"mySite"] isKindOfClass:[NSNull class]] )?_mySite:[[dic objectForKey: @"mySite"] copy];

        if([dic objectForKey: @"pastProjects"] != [NSNull null]){
            _pastProjects = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"pastProjects"]) {
                [_pastProjects addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_pastProjects resetChangedFlag];
        }
        
		_preferredName = (![dic objectForKey: @"preferredName"] || [ [dic objectForKey: @"preferredName"] isKindOfClass:[NSNull class]] )?_preferredName:[[dic objectForKey: @"preferredName"] copy];

        if([dic objectForKey: @"responsibilities"] != [NSNull null]){
            _responsibilities = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"responsibilities"]) {
                [_responsibilities addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_responsibilities resetChangedFlag];
        }
        

        if([dic objectForKey: @"schools"] != [NSNull null]){
            _schools = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"schools"]) {
                [_schools addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_schools resetChangedFlag];
        }
        

        if([dic objectForKey: @"skills"] != [NSNull null]){
            _skills = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"skills"]) {
                [_skills addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_skills resetChangedFlag];
        }
        

        if([dic objectForKey: @"ownedDevices"] != [NSNull null]){
            _ownedDevices = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ownedDevices"]) {
                [_ownedDevices addObject:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_ownedDevices resetChangedFlag];
        }
        

        if([dic objectForKey: @"registeredDevices"] != [NSNull null]){
            _registeredDevices = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"registeredDevices"]) {
                [_registeredDevices addObject:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_registeredDevices resetChangedFlag];
        }
        
		_manager = (![dic objectForKey: @"manager"] || [ [dic objectForKey: @"manager"] isKindOfClass:[NSNull class]] )?_manager:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: [dic objectForKey: @"manager"]];

        if([dic objectForKey: @"directReports"] != [NSNull null]){
            _directReports = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"directReports"]) {
                [_directReports addObject:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_directReports resetChangedFlag];
        }
        

        if([dic objectForKey: @"memberOf"] != [NSNull null]){
            _memberOf = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"memberOf"]) {
                [_memberOf addObject:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_memberOf resetChangedFlag];
        }
        

        if([dic objectForKey: @"createdObjects"] != [NSNull null]){
            _createdObjects = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"createdObjects"]) {
                [_createdObjects addObject:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_createdObjects resetChangedFlag];
        }
        

        if([dic objectForKey: @"ownedObjects"] != [NSNull null]){
            _ownedObjects = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ownedObjects"]) {
                [_ownedObjects addObject:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_ownedObjects resetChangedFlag];
        }
        

        if([dic objectForKey: @"messages"] != [NSNull null]){
            _messages = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"messages"]) {
                [_messages addObject:[[MSGraphServiceMessage alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_messages resetChangedFlag];
        }
        

        if([dic objectForKey: @"mailFolders"] != [NSNull null]){
            _mailFolders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"mailFolders"]) {
                [_mailFolders addObject:[[MSGraphServiceMailFolder alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_mailFolders resetChangedFlag];
        }
        
		_calendar = (![dic objectForKey: @"calendar"] || [ [dic objectForKey: @"calendar"] isKindOfClass:[NSNull class]] )?_calendar:[[MSGraphServiceCalendar alloc] initWithDictionary: [dic objectForKey: @"calendar"]];

        if([dic objectForKey: @"calendars"] != [NSNull null]){
            _calendars = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"calendars"]) {
                [_calendars addObject:[[MSGraphServiceCalendar alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendars resetChangedFlag];
        }
        

        if([dic objectForKey: @"calendarGroups"] != [NSNull null]){
            _calendarGroups = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"calendarGroups"]) {
                [_calendarGroups addObject:[[MSGraphServiceCalendarGroup alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendarGroups resetChangedFlag];
        }
        

        if([dic objectForKey: @"calendarView"] != [NSNull null]){
            _calendarView = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"calendarView"]) {
                [_calendarView addObject:[[MSGraphServiceEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_calendarView resetChangedFlag];
        }
        

        if([dic objectForKey: @"events"] != [NSNull null]){
            _events = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"events"]) {
                [_events addObject:[[MSGraphServiceEvent alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_events resetChangedFlag];
        }
        

        if([dic objectForKey: @"contacts"] != [NSNull null]){
            _contacts = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"contacts"]) {
                [_contacts addObject:[[MSGraphServiceContact alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_contacts resetChangedFlag];
        }
        

        if([dic objectForKey: @"contactFolders"] != [NSNull null]){
            _contactFolders = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"contactFolders"]) {
                [_contactFolders addObject:[[MSGraphServiceContactFolder alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_contactFolders resetChangedFlag];
        }
        
		_photo = (![dic objectForKey: @"photo"] || [ [dic objectForKey: @"photo"] isKindOfClass:[NSNull class]] )?_photo:[[MSGraphServiceProfilePhoto alloc] initWithDictionary: [dic objectForKey: @"photo"]];
		_drive = (![dic objectForKey: @"drive"] || [ [dic objectForKey: @"drive"] isKindOfClass:[NSNull class]] )?_drive:[[MSGraphServiceDrive alloc] initWithDictionary: [dic objectForKey: @"drive"]];
		self._id = (![dic objectForKey: @"id"] || [ [dic objectForKey: @"id"] isKindOfClass:[NSNull class]] )?self._id:[[dic objectForKey: @"id"] copy];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{[dic setValue: (self.accountEnabled?@"true":@"false") forKey: @"accountEnabled"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedLicenses) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"assignedLicenses"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedPlans) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"assignedPlans"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.businessPhones) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"businessPhones"];}
	{id curVal = [self.city copy];if (curVal!=nil) [dic setValue: curVal forKey: @"city"];}
	{id curVal = [self.companyName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"companyName"];}
	{id curVal = [self.country copy];if (curVal!=nil) [dic setValue: curVal forKey: @"country"];}
	{id curVal = [self.department copy];if (curVal!=nil) [dic setValue: curVal forKey: @"department"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{id curVal = [self.givenName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"givenName"];}
	{id curVal = [self.jobTitle copy];if (curVal!=nil) [dic setValue: curVal forKey: @"jobTitle"];}
	{id curVal = [self.mail copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mail"];}
	{id curVal = [self.mailNickname copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mailNickname"];}
	{id curVal = [self.mobilePhone copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mobilePhone"];}
	{id curVal = [self.onPremisesImmutableId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesImmutableId"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.onPremisesLastSyncDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesLastSyncDateTime"];}
	{id curVal = [self.onPremisesSecurityIdentifier copy];if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesSecurityIdentifier"];}
	{[dic setValue: (self.onPremisesSyncEnabled?@"true":@"false") forKey: @"onPremisesSyncEnabled"];}
	{id curVal = [self.passwordPolicies copy];if (curVal!=nil) [dic setValue: curVal forKey: @"passwordPolicies"];}
	{id curVal = [self.passwordProfile toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"passwordProfile"];}
	{id curVal = [self.officeLocation copy];if (curVal!=nil) [dic setValue: curVal forKey: @"officeLocation"];}
	{id curVal = [self.postalCode copy];if (curVal!=nil) [dic setValue: curVal forKey: @"postalCode"];}
	{id curVal = [self.preferredLanguage copy];if (curVal!=nil) [dic setValue: curVal forKey: @"preferredLanguage"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.provisionedPlans) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"provisionedPlans"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.proxyAddresses) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"proxyAddresses"];}
	{id curVal = [self.state copy];if (curVal!=nil) [dic setValue: curVal forKey: @"state"];}
	{id curVal = [self.streetAddress copy];if (curVal!=nil) [dic setValue: curVal forKey: @"streetAddress"];}
	{id curVal = [self.surname copy];if (curVal!=nil) [dic setValue: curVal forKey: @"surname"];}
	{id curVal = [self.usageLocation copy];if (curVal!=nil) [dic setValue: curVal forKey: @"usageLocation"];}
	{id curVal = [self.userPrincipalName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"userPrincipalName"];}
	{id curVal = [self.userType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"userType"];}
	{id curVal = [self.aboutMe copy];if (curVal!=nil) [dic setValue: curVal forKey: @"aboutMe"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.birthday];if (curVal!=nil) [dic setValue: curVal forKey: @"birthday"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.hireDate];if (curVal!=nil) [dic setValue: curVal forKey: @"hireDate"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.interests) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"interests"];}
	{id curVal = [self.mySite copy];if (curVal!=nil) [dic setValue: curVal forKey: @"mySite"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.pastProjects) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"pastProjects"];}
	{id curVal = [self.preferredName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"preferredName"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.responsibilities) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"responsibilities"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.schools) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"schools"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.skills) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"skills"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedDevices) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ownedDevices"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredDevices) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"registeredDevices"];}
	{id curVal = [self.manager toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"manager"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.directReports) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"directReports"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.memberOf) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"memberOf"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.createdObjects) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"createdObjects"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedObjects) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ownedObjects"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.messages) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"messages"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.mailFolders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"mailFolders"];}
	{id curVal = [self.calendar toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"calendar"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendars) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"calendars"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarGroups) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"calendarGroups"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"calendarView"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"events"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.contacts) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"contacts"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.contactFolders) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"contactFolders"];}
	{id curVal = [self.photo toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"photo"];}
	{id curVal = [self.drive toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"drive"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"id"];}
    [dic setValue: @"#microsoft.graph.user" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

 if([self.updatedValues containsObject:@"accountEnabled"])
            { [dic setValue: (self.accountEnabled?@"true":@"false") forKey: @"accountEnabled"];
}	{id curVal = self.assignedLicenses;
    if([self.updatedValues containsObject:@"assignedLicenses"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"assignedLicenses"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedLicenses) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"assignedLicenses"];
        }
        
            }}
	{id curVal = self.assignedPlans;
    if([self.updatedValues containsObject:@"assignedPlans"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"assignedPlans"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedPlans) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"assignedPlans"];
        }
        
            }}
	{id curVal = self.businessPhones;
    if([self.updatedValues containsObject:@"businessPhones"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"businessPhones"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.businessPhones) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"businessPhones"];
        }
        
            }}
	{id curVal = self.city;
    if([self.updatedValues containsObject:@"city"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"city"];
            }
    }
	{id curVal = self.companyName;
    if([self.updatedValues containsObject:@"companyName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"companyName"];
            }
    }
	{id curVal = self.country;
    if([self.updatedValues containsObject:@"country"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"country"];
            }
    }
	{id curVal = self.department;
    if([self.updatedValues containsObject:@"department"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"department"];
            }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
            }
    }
	{id curVal = self.givenName;
    if([self.updatedValues containsObject:@"givenName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"givenName"];
            }
    }
	{id curVal = self.jobTitle;
    if([self.updatedValues containsObject:@"jobTitle"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"jobTitle"];
            }
    }
	{id curVal = self.mail;
    if([self.updatedValues containsObject:@"mail"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mail"];
            }
    }
	{id curVal = self.mailNickname;
    if([self.updatedValues containsObject:@"mailNickname"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mailNickname"];
            }
    }
	{id curVal = self.mobilePhone;
    if([self.updatedValues containsObject:@"mobilePhone"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mobilePhone"];
            }
    }
	{id curVal = self.onPremisesImmutableId;
    if([self.updatedValues containsObject:@"onPremisesImmutableId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"onPremisesImmutableId"];
            }
    }
	{id curVal = self.onPremisesLastSyncDateTime;
    if([self.updatedValues containsObject:@"onPremisesLastSyncDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"onPremisesLastSyncDateTime"];
            }
    }
	{id curVal = self.onPremisesSecurityIdentifier;
    if([self.updatedValues containsObject:@"onPremisesSecurityIdentifier"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"onPremisesSecurityIdentifier"];
            }
    }
 if([self.updatedValues containsObject:@"onPremisesSyncEnabled"])
            { [dic setValue: (self.onPremisesSyncEnabled?@"true":@"false") forKey: @"onPremisesSyncEnabled"];
}	{id curVal = self.passwordPolicies;
    if([self.updatedValues containsObject:@"passwordPolicies"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"passwordPolicies"];
            }
    }
	{id curVal = self.passwordProfile;
    if([self.updatedValues containsObject:@"passwordProfile"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"passwordProfile"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"passwordProfile"];
            }
        
            }}
	{id curVal = self.officeLocation;
    if([self.updatedValues containsObject:@"officeLocation"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"officeLocation"];
            }
    }
	{id curVal = self.postalCode;
    if([self.updatedValues containsObject:@"postalCode"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"postalCode"];
            }
    }
	{id curVal = self.preferredLanguage;
    if([self.updatedValues containsObject:@"preferredLanguage"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"preferredLanguage"];
            }
    }
	{id curVal = self.provisionedPlans;
    if([self.updatedValues containsObject:@"provisionedPlans"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"provisionedPlans"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.provisionedPlans) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"provisionedPlans"];
        }
        
            }}
	{id curVal = self.proxyAddresses;
    if([self.updatedValues containsObject:@"proxyAddresses"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"proxyAddresses"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.proxyAddresses) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"proxyAddresses"];
        }
        
            }}
	{id curVal = self.state;
    if([self.updatedValues containsObject:@"state"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"state"];
            }
    }
	{id curVal = self.streetAddress;
    if([self.updatedValues containsObject:@"streetAddress"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"streetAddress"];
            }
    }
	{id curVal = self.surname;
    if([self.updatedValues containsObject:@"surname"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"surname"];
            }
    }
	{id curVal = self.usageLocation;
    if([self.updatedValues containsObject:@"usageLocation"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"usageLocation"];
            }
    }
	{id curVal = self.userPrincipalName;
    if([self.updatedValues containsObject:@"userPrincipalName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"userPrincipalName"];
            }
    }
	{id curVal = self.userType;
    if([self.updatedValues containsObject:@"userType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"userType"];
            }
    }
	{id curVal = self.aboutMe;
    if([self.updatedValues containsObject:@"aboutMe"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"aboutMe"];
            }
    }
	{id curVal = self.birthday;
    if([self.updatedValues containsObject:@"birthday"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"birthday"];
            }
    }
	{id curVal = self.hireDate;
    if([self.updatedValues containsObject:@"hireDate"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"hireDate"];
            }
    }
	{id curVal = self.interests;
    if([self.updatedValues containsObject:@"interests"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"interests"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.interests) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"interests"];
        }
        
            }}
	{id curVal = self.mySite;
    if([self.updatedValues containsObject:@"mySite"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"mySite"];
            }
    }
	{id curVal = self.pastProjects;
    if([self.updatedValues containsObject:@"pastProjects"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"pastProjects"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.pastProjects) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"pastProjects"];
        }
        
            }}
	{id curVal = self.preferredName;
    if([self.updatedValues containsObject:@"preferredName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"preferredName"];
            }
    }
	{id curVal = self.responsibilities;
    if([self.updatedValues containsObject:@"responsibilities"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"responsibilities"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.responsibilities) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"responsibilities"];
        }
        
            }}
	{id curVal = self.schools;
    if([self.updatedValues containsObject:@"schools"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"schools"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.schools) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"schools"];
        }
        
            }}
	{id curVal = self.skills;
    if([self.updatedValues containsObject:@"skills"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"skills"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.skills) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"skills"];
        }
        
            }}
	{id curVal = self.ownedDevices;
    if([self.updatedValues containsObject:@"ownedDevices"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ownedDevices"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedDevices) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ownedDevices"];
        }
        
            }}
	{id curVal = self.registeredDevices;
    if([self.updatedValues containsObject:@"registeredDevices"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"registeredDevices"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredDevices) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"registeredDevices"];
        }
        
            }}
	{id curVal = self.manager;
    if([self.updatedValues containsObject:@"manager"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"manager"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"manager"];
            }
        
            }}
	{id curVal = self.directReports;
    if([self.updatedValues containsObject:@"directReports"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"directReports"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.directReports) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"directReports"];
        }
        
            }}
	{id curVal = self.memberOf;
    if([self.updatedValues containsObject:@"memberOf"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"memberOf"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.memberOf) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"memberOf"];
        }
        
            }}
	{id curVal = self.createdObjects;
    if([self.updatedValues containsObject:@"createdObjects"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"createdObjects"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.createdObjects) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"createdObjects"];
        }
        
            }}
	{id curVal = self.ownedObjects;
    if([self.updatedValues containsObject:@"ownedObjects"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ownedObjects"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.ownedObjects) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ownedObjects"];
        }
        
            }}
	{id curVal = self.messages;
    if([self.updatedValues containsObject:@"messages"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"messages"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.messages) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"messages"];
        }
        
            }}
	{id curVal = self.mailFolders;
    if([self.updatedValues containsObject:@"mailFolders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"mailFolders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.mailFolders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"mailFolders"];
        }
        
            }}
	{id curVal = self.calendar;
    if([self.updatedValues containsObject:@"calendar"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"calendar"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"calendar"];
            }
        
            }}
	{id curVal = self.calendars;
    if([self.updatedValues containsObject:@"calendars"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"calendars"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendars) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"calendars"];
        }
        
            }}
	{id curVal = self.calendarGroups;
    if([self.updatedValues containsObject:@"calendarGroups"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"calendarGroups"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarGroups) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"calendarGroups"];
        }
        
            }}
	{id curVal = self.calendarView;
    if([self.updatedValues containsObject:@"calendarView"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"calendarView"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.calendarView) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"calendarView"];
        }
        
            }}
	{id curVal = self.events;
    if([self.updatedValues containsObject:@"events"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"events"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.events) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"events"];
        }
        
            }}
	{id curVal = self.contacts;
    if([self.updatedValues containsObject:@"contacts"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"contacts"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.contacts) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"contacts"];
        }
        
            }}
	{id curVal = self.contactFolders;
    if([self.updatedValues containsObject:@"contactFolders"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"contactFolders"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.contactFolders) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"contactFolders"];
        }
        
            }}
	{id curVal = self.photo;
    if([self.updatedValues containsObject:@"photo"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"photo"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"photo"];
            }
        
            }}
	{id curVal = self.drive;
    if([self.updatedValues containsObject:@"drive"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"drive"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"drive"];
            }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"id"];
            }
    }
    return dic;
}


/** Setter implementation for property accountEnabled
 *
 */
- (void) setAccountEnabled: (bool) value {
    _accountEnabled = value;
    [self valueChangedFor:@"accountEnabled"];
}
       
/** Setter implementation for property assignedLicenses
 *
 */
- (void) setAssignedLicenses: (NSMutableArray *) value {
    _assignedLicenses = value;
    [self valueChangedFor:@"assignedLicenses"];
}
       
/** Setter implementation for property assignedPlans
 *
 */
- (void) setAssignedPlans: (NSMutableArray *) value {
    _assignedPlans = value;
    [self valueChangedFor:@"assignedPlans"];
}
       
/** Setter implementation for property businessPhones
 *
 */
- (void) setBusinessPhones: (NSMutableArray *) value {
    _businessPhones = value;
    [self valueChangedFor:@"businessPhones"];
}
       
/** Setter implementation for property city
 *
 */
- (void) setCity: (NSString *) value {
    _city = value;
    [self valueChangedFor:@"city"];
}
       
/** Setter implementation for property companyName
 *
 */
- (void) setCompanyName: (NSString *) value {
    _companyName = value;
    [self valueChangedFor:@"companyName"];
}
       
/** Setter implementation for property country
 *
 */
- (void) setCountry: (NSString *) value {
    _country = value;
    [self valueChangedFor:@"country"];
}
       
/** Setter implementation for property department
 *
 */
- (void) setDepartment: (NSString *) value {
    _department = value;
    [self valueChangedFor:@"department"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property givenName
 *
 */
- (void) setGivenName: (NSString *) value {
    _givenName = value;
    [self valueChangedFor:@"givenName"];
}
       
/** Setter implementation for property jobTitle
 *
 */
- (void) setJobTitle: (NSString *) value {
    _jobTitle = value;
    [self valueChangedFor:@"jobTitle"];
}
       
/** Setter implementation for property mail
 *
 */
- (void) setMail: (NSString *) value {
    _mail = value;
    [self valueChangedFor:@"mail"];
}
       
/** Setter implementation for property mailNickname
 *
 */
- (void) setMailNickname: (NSString *) value {
    _mailNickname = value;
    [self valueChangedFor:@"mailNickname"];
}
       
/** Setter implementation for property mobilePhone
 *
 */
- (void) setMobilePhone: (NSString *) value {
    _mobilePhone = value;
    [self valueChangedFor:@"mobilePhone"];
}
       
/** Setter implementation for property onPremisesImmutableId
 *
 */
- (void) setOnPremisesImmutableId: (NSString *) value {
    _onPremisesImmutableId = value;
    [self valueChangedFor:@"onPremisesImmutableId"];
}
       
/** Setter implementation for property onPremisesLastSyncDateTime
 *
 */
- (void) setOnPremisesLastSyncDateTime: (NSDate *) value {
    _onPremisesLastSyncDateTime = value;
    [self valueChangedFor:@"onPremisesLastSyncDateTime"];
}
       
/** Setter implementation for property onPremisesSecurityIdentifier
 *
 */
- (void) setOnPremisesSecurityIdentifier: (NSString *) value {
    _onPremisesSecurityIdentifier = value;
    [self valueChangedFor:@"onPremisesSecurityIdentifier"];
}
       
/** Setter implementation for property onPremisesSyncEnabled
 *
 */
- (void) setOnPremisesSyncEnabled: (bool) value {
    _onPremisesSyncEnabled = value;
    [self valueChangedFor:@"onPremisesSyncEnabled"];
}
       
/** Setter implementation for property passwordPolicies
 *
 */
- (void) setPasswordPolicies: (NSString *) value {
    _passwordPolicies = value;
    [self valueChangedFor:@"passwordPolicies"];
}
       
/** Setter implementation for property passwordProfile
 *
 */
- (void) setPasswordProfile: (MSGraphServicePasswordProfile *) value {
    _passwordProfile = value;
    [self valueChangedFor:@"passwordProfile"];
}
       
/** Setter implementation for property officeLocation
 *
 */
- (void) setOfficeLocation: (NSString *) value {
    _officeLocation = value;
    [self valueChangedFor:@"officeLocation"];
}
       
/** Setter implementation for property postalCode
 *
 */
- (void) setPostalCode: (NSString *) value {
    _postalCode = value;
    [self valueChangedFor:@"postalCode"];
}
       
/** Setter implementation for property preferredLanguage
 *
 */
- (void) setPreferredLanguage: (NSString *) value {
    _preferredLanguage = value;
    [self valueChangedFor:@"preferredLanguage"];
}
       
/** Setter implementation for property provisionedPlans
 *
 */
- (void) setProvisionedPlans: (NSMutableArray *) value {
    _provisionedPlans = value;
    [self valueChangedFor:@"provisionedPlans"];
}
       
/** Setter implementation for property proxyAddresses
 *
 */
- (void) setProxyAddresses: (NSMutableArray *) value {
    _proxyAddresses = value;
    [self valueChangedFor:@"proxyAddresses"];
}
       
/** Setter implementation for property state
 *
 */
- (void) setState: (NSString *) value {
    _state = value;
    [self valueChangedFor:@"state"];
}
       
/** Setter implementation for property streetAddress
 *
 */
- (void) setStreetAddress: (NSString *) value {
    _streetAddress = value;
    [self valueChangedFor:@"streetAddress"];
}
       
/** Setter implementation for property surname
 *
 */
- (void) setSurname: (NSString *) value {
    _surname = value;
    [self valueChangedFor:@"surname"];
}
       
/** Setter implementation for property usageLocation
 *
 */
- (void) setUsageLocation: (NSString *) value {
    _usageLocation = value;
    [self valueChangedFor:@"usageLocation"];
}
       
/** Setter implementation for property userPrincipalName
 *
 */
- (void) setUserPrincipalName: (NSString *) value {
    _userPrincipalName = value;
    [self valueChangedFor:@"userPrincipalName"];
}
       
/** Setter implementation for property userType
 *
 */
- (void) setUserType: (NSString *) value {
    _userType = value;
    [self valueChangedFor:@"userType"];
}
       
/** Setter implementation for property aboutMe
 *
 */
- (void) setAboutMe: (NSString *) value {
    _aboutMe = value;
    [self valueChangedFor:@"aboutMe"];
}
       
/** Setter implementation for property birthday
 *
 */
- (void) setBirthday: (NSDate *) value {
    _birthday = value;
    [self valueChangedFor:@"birthday"];
}
       
/** Setter implementation for property hireDate
 *
 */
- (void) setHireDate: (NSDate *) value {
    _hireDate = value;
    [self valueChangedFor:@"hireDate"];
}
       
/** Setter implementation for property interests
 *
 */
- (void) setInterests: (NSMutableArray *) value {
    _interests = value;
    [self valueChangedFor:@"interests"];
}
       
/** Setter implementation for property mySite
 *
 */
- (void) setMySite: (NSString *) value {
    _mySite = value;
    [self valueChangedFor:@"mySite"];
}
       
/** Setter implementation for property pastProjects
 *
 */
- (void) setPastProjects: (NSMutableArray *) value {
    _pastProjects = value;
    [self valueChangedFor:@"pastProjects"];
}
       
/** Setter implementation for property preferredName
 *
 */
- (void) setPreferredName: (NSString *) value {
    _preferredName = value;
    [self valueChangedFor:@"preferredName"];
}
       
/** Setter implementation for property responsibilities
 *
 */
- (void) setResponsibilities: (NSMutableArray *) value {
    _responsibilities = value;
    [self valueChangedFor:@"responsibilities"];
}
       
/** Setter implementation for property schools
 *
 */
- (void) setSchools: (NSMutableArray *) value {
    _schools = value;
    [self valueChangedFor:@"schools"];
}
       
/** Setter implementation for property skills
 *
 */
- (void) setSkills: (NSMutableArray *) value {
    _skills = value;
    [self valueChangedFor:@"skills"];
}
       
/** Setter implementation for property ownedDevices
 *
 */
- (void) setOwnedDevices: (NSMutableArray *) value {
    _ownedDevices = value;
    [self valueChangedFor:@"ownedDevices"];
}
       
/** Setter implementation for property registeredDevices
 *
 */
- (void) setRegisteredDevices: (NSMutableArray *) value {
    _registeredDevices = value;
    [self valueChangedFor:@"registeredDevices"];
}
       
/** Setter implementation for property manager
 *
 */
- (void) setManager: (MSGraphServiceDirectoryObject *) value {
    _manager = value;
    [self valueChangedFor:@"manager"];
}
       
/** Setter implementation for property directReports
 *
 */
- (void) setDirectReports: (NSMutableArray *) value {
    _directReports = value;
    [self valueChangedFor:@"directReports"];
}
       
/** Setter implementation for property memberOf
 *
 */
- (void) setMemberOf: (NSMutableArray *) value {
    _memberOf = value;
    [self valueChangedFor:@"memberOf"];
}
       
/** Setter implementation for property createdObjects
 *
 */
- (void) setCreatedObjects: (NSMutableArray *) value {
    _createdObjects = value;
    [self valueChangedFor:@"createdObjects"];
}
       
/** Setter implementation for property ownedObjects
 *
 */
- (void) setOwnedObjects: (NSMutableArray *) value {
    _ownedObjects = value;
    [self valueChangedFor:@"ownedObjects"];
}
       
/** Setter implementation for property messages
 *
 */
- (void) setMessages: (NSMutableArray *) value {
    _messages = value;
    [self valueChangedFor:@"messages"];
}
       
/** Setter implementation for property mailFolders
 *
 */
- (void) setMailFolders: (NSMutableArray *) value {
    _mailFolders = value;
    [self valueChangedFor:@"mailFolders"];
}
       
/** Setter implementation for property calendar
 *
 */
- (void) setCalendar: (MSGraphServiceCalendar *) value {
    _calendar = value;
    [self valueChangedFor:@"calendar"];
}
       
/** Setter implementation for property calendars
 *
 */
- (void) setCalendars: (NSMutableArray *) value {
    _calendars = value;
    [self valueChangedFor:@"calendars"];
}
       
/** Setter implementation for property calendarGroups
 *
 */
- (void) setCalendarGroups: (NSMutableArray *) value {
    _calendarGroups = value;
    [self valueChangedFor:@"calendarGroups"];
}
       
/** Setter implementation for property calendarView
 *
 */
- (void) setCalendarView: (NSMutableArray *) value {
    _calendarView = value;
    [self valueChangedFor:@"calendarView"];
}
       
/** Setter implementation for property events
 *
 */
- (void) setEvents: (NSMutableArray *) value {
    _events = value;
    [self valueChangedFor:@"events"];
}
       
/** Setter implementation for property contacts
 *
 */
- (void) setContacts: (NSMutableArray *) value {
    _contacts = value;
    [self valueChangedFor:@"contacts"];
}
       
/** Setter implementation for property contactFolders
 *
 */
- (void) setContactFolders: (NSMutableArray *) value {
    _contactFolders = value;
    [self valueChangedFor:@"contactFolders"];
}
       
/** Setter implementation for property photo
 *
 */
- (void) setPhoto: (MSGraphServiceProfilePhoto *) value {
    _photo = value;
    [self valueChangedFor:@"photo"];
}
       
/** Setter implementation for property drive
 *
 */
- (void) setDrive: (MSGraphServiceDrive *) value {
    _drive = value;
    [self valueChangedFor:@"drive"];
}
       

@end
