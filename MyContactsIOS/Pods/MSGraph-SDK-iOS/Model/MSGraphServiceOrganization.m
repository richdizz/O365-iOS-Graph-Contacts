/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Corporation. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphServiceModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSGraphServiceOrganization
 *
 */
@implementation MSGraphServiceOrganization


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"assignedPlans", @"assignedPlans", @"businessPhones", @"businessPhones", @"city", @"city", @"country", @"country", @"countryLetterCode", @"countryLetterCode", @"displayName", @"displayName", @"marketingNotificationEmails", @"marketingNotificationEmails", @"onPremisesLastSyncDateTime", @"onPremisesLastSyncDateTime", @"onPremisesSyncEnabled", @"onPremisesSyncEnabled", @"postalCode", @"postalCode", @"preferredLanguage", @"preferredLanguage", @"provisionedPlans", @"provisionedPlans", @"securityComplianceNotificationMails", @"securityComplianceNotificationMails", @"securityComplianceNotificationPhones", @"securityComplianceNotificationPhones", @"state", @"state", @"street", @"street", @"technicalNotificationMails", @"technicalNotificationMails", @"verifiedDomains", @"verifiedDomains", @"id", @"_id", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.organization";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {

        if([dic objectForKey: @"assignedPlans"] != [NSNull null]){
            _assignedPlans = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"assignedPlans"]) {
                [_assignedPlans addObject:[[MSGraphServiceAssignedPlan alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_assignedPlans resetChangedFlag];
        }
        

        if([dic objectForKey: @"businessPhones"] != [NSNull null]){
            _businessPhones = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"businessPhones"]) {
                [_businessPhones addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_businessPhones resetChangedFlag];
        }
        
		_city = (![dic objectForKey: @"city"] || [ [dic objectForKey: @"city"] isKindOfClass:[NSNull class]] )?_city:[[dic objectForKey: @"city"] copy];
		_country = (![dic objectForKey: @"country"] || [ [dic objectForKey: @"country"] isKindOfClass:[NSNull class]] )?_country:[[dic objectForKey: @"country"] copy];
		_countryLetterCode = (![dic objectForKey: @"countryLetterCode"] || [ [dic objectForKey: @"countryLetterCode"] isKindOfClass:[NSNull class]] )?_countryLetterCode:[[dic objectForKey: @"countryLetterCode"] copy];
		_displayName = (![dic objectForKey: @"displayName"] || [ [dic objectForKey: @"displayName"] isKindOfClass:[NSNull class]] )?_displayName:[[dic objectForKey: @"displayName"] copy];

        if([dic objectForKey: @"marketingNotificationEmails"] != [NSNull null]){
            _marketingNotificationEmails = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"marketingNotificationEmails"]) {
                [_marketingNotificationEmails addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_marketingNotificationEmails resetChangedFlag];
        }
        
		_onPremisesLastSyncDateTime = (![dic objectForKey: @"onPremisesLastSyncDateTime"] || [ [dic objectForKey: @"onPremisesLastSyncDateTime"] isKindOfClass:[NSNull class]] )?_onPremisesLastSyncDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"onPremisesLastSyncDateTime"]];
		_onPremisesSyncEnabled = (![dic objectForKey: @"onPremisesSyncEnabled"] || [ [dic objectForKey: @"onPremisesSyncEnabled"] isKindOfClass:[NSNull class]] )?_onPremisesSyncEnabled:[[dic objectForKey: @"onPremisesSyncEnabled"] boolValue];
		_postalCode = (![dic objectForKey: @"postalCode"] || [ [dic objectForKey: @"postalCode"] isKindOfClass:[NSNull class]] )?_postalCode:[[dic objectForKey: @"postalCode"] copy];
		_preferredLanguage = (![dic objectForKey: @"preferredLanguage"] || [ [dic objectForKey: @"preferredLanguage"] isKindOfClass:[NSNull class]] )?_preferredLanguage:[[dic objectForKey: @"preferredLanguage"] copy];

        if([dic objectForKey: @"provisionedPlans"] != [NSNull null]){
            _provisionedPlans = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"provisionedPlans"]) {
                [_provisionedPlans addObject:[[MSGraphServiceProvisionedPlan alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_provisionedPlans resetChangedFlag];
        }
        

        if([dic objectForKey: @"securityComplianceNotificationMails"] != [NSNull null]){
            _securityComplianceNotificationMails = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"securityComplianceNotificationMails"]) {
                [_securityComplianceNotificationMails addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_securityComplianceNotificationMails resetChangedFlag];
        }
        

        if([dic objectForKey: @"securityComplianceNotificationPhones"] != [NSNull null]){
            _securityComplianceNotificationPhones = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"securityComplianceNotificationPhones"]) {
                [_securityComplianceNotificationPhones addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_securityComplianceNotificationPhones resetChangedFlag];
        }
        
		_state = (![dic objectForKey: @"state"] || [ [dic objectForKey: @"state"] isKindOfClass:[NSNull class]] )?_state:[[dic objectForKey: @"state"] copy];
		_street = (![dic objectForKey: @"street"] || [ [dic objectForKey: @"street"] isKindOfClass:[NSNull class]] )?_street:[[dic objectForKey: @"street"] copy];

        if([dic objectForKey: @"technicalNotificationMails"] != [NSNull null]){
            _technicalNotificationMails = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"technicalNotificationMails"]) {
                [_technicalNotificationMails addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_technicalNotificationMails resetChangedFlag];
        }
        

        if([dic objectForKey: @"verifiedDomains"] != [NSNull null]){
            _verifiedDomains = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"verifiedDomains"]) {
                [_verifiedDomains addObject:[[MSGraphServiceVerifiedDomain alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_verifiedDomains resetChangedFlag];
        }
        
		self._id = (![dic objectForKey: @"id"] || [ [dic objectForKey: @"id"] isKindOfClass:[NSNull class]] )?self._id:[[dic objectForKey: @"id"] copy];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedPlans) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"assignedPlans"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.businessPhones) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"businessPhones"];}
	{id curVal = [self.city copy];if (curVal!=nil) [dic setValue: curVal forKey: @"city"];}
	{id curVal = [self.country copy];if (curVal!=nil) [dic setValue: curVal forKey: @"country"];}
	{id curVal = [self.countryLetterCode copy];if (curVal!=nil) [dic setValue: curVal forKey: @"countryLetterCode"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.marketingNotificationEmails) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"marketingNotificationEmails"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.onPremisesLastSyncDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesLastSyncDateTime"];}
	{[dic setValue: (self.onPremisesSyncEnabled?@"true":@"false") forKey: @"onPremisesSyncEnabled"];}
	{id curVal = [self.postalCode copy];if (curVal!=nil) [dic setValue: curVal forKey: @"postalCode"];}
	{id curVal = [self.preferredLanguage copy];if (curVal!=nil) [dic setValue: curVal forKey: @"preferredLanguage"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.provisionedPlans) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"provisionedPlans"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.securityComplianceNotificationMails) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"securityComplianceNotificationMails"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.securityComplianceNotificationPhones) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"securityComplianceNotificationPhones"];}
	{id curVal = [self.state copy];if (curVal!=nil) [dic setValue: curVal forKey: @"state"];}
	{id curVal = [self.street copy];if (curVal!=nil) [dic setValue: curVal forKey: @"street"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.technicalNotificationMails) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"technicalNotificationMails"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.verifiedDomains) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"verifiedDomains"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"id"];}
    [dic setValue: @"#microsoft.graph.organization" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.assignedPlans;
    if([self.updatedValues containsObject:@"assignedPlans"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"assignedPlans"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.assignedPlans) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"assignedPlans"];
        }
        
            }}
	{id curVal = self.businessPhones;
    if([self.updatedValues containsObject:@"businessPhones"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"businessPhones"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.businessPhones) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"businessPhones"];
        }
        
            }}
	{id curVal = self.city;
    if([self.updatedValues containsObject:@"city"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"city"];
            }
    }
	{id curVal = self.country;
    if([self.updatedValues containsObject:@"country"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"country"];
            }
    }
	{id curVal = self.countryLetterCode;
    if([self.updatedValues containsObject:@"countryLetterCode"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"countryLetterCode"];
            }
    }
	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
            }
    }
	{id curVal = self.marketingNotificationEmails;
    if([self.updatedValues containsObject:@"marketingNotificationEmails"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"marketingNotificationEmails"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.marketingNotificationEmails) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"marketingNotificationEmails"];
        }
        
            }}
	{id curVal = self.onPremisesLastSyncDateTime;
    if([self.updatedValues containsObject:@"onPremisesLastSyncDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"onPremisesLastSyncDateTime"];
            }
    }
 if([self.updatedValues containsObject:@"onPremisesSyncEnabled"])
            { [dic setValue: (self.onPremisesSyncEnabled?@"true":@"false") forKey: @"onPremisesSyncEnabled"];
}	{id curVal = self.postalCode;
    if([self.updatedValues containsObject:@"postalCode"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"postalCode"];
            }
    }
	{id curVal = self.preferredLanguage;
    if([self.updatedValues containsObject:@"preferredLanguage"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"preferredLanguage"];
            }
    }
	{id curVal = self.provisionedPlans;
    if([self.updatedValues containsObject:@"provisionedPlans"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"provisionedPlans"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.provisionedPlans) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"provisionedPlans"];
        }
        
            }}
	{id curVal = self.securityComplianceNotificationMails;
    if([self.updatedValues containsObject:@"securityComplianceNotificationMails"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"securityComplianceNotificationMails"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.securityComplianceNotificationMails) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"securityComplianceNotificationMails"];
        }
        
            }}
	{id curVal = self.securityComplianceNotificationPhones;
    if([self.updatedValues containsObject:@"securityComplianceNotificationPhones"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"securityComplianceNotificationPhones"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.securityComplianceNotificationPhones) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"securityComplianceNotificationPhones"];
        }
        
            }}
	{id curVal = self.state;
    if([self.updatedValues containsObject:@"state"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"state"];
            }
    }
	{id curVal = self.street;
    if([self.updatedValues containsObject:@"street"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"street"];
            }
    }
	{id curVal = self.technicalNotificationMails;
    if([self.updatedValues containsObject:@"technicalNotificationMails"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"technicalNotificationMails"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.technicalNotificationMails) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"technicalNotificationMails"];
        }
        
            }}
	{id curVal = self.verifiedDomains;
    if([self.updatedValues containsObject:@"verifiedDomains"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"verifiedDomains"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.verifiedDomains) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"verifiedDomains"];
        }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"id"];
            }
    }
    return dic;
}


/** Setter implementation for property assignedPlans
 *
 */
- (void) setAssignedPlans: (NSMutableArray *) value {
    _assignedPlans = value;
    [self valueChangedFor:@"assignedPlans"];
}
       
/** Setter implementation for property businessPhones
 *
 */
- (void) setBusinessPhones: (NSMutableArray *) value {
    _businessPhones = value;
    [self valueChangedFor:@"businessPhones"];
}
       
/** Setter implementation for property city
 *
 */
- (void) setCity: (NSString *) value {
    _city = value;
    [self valueChangedFor:@"city"];
}
       
/** Setter implementation for property country
 *
 */
- (void) setCountry: (NSString *) value {
    _country = value;
    [self valueChangedFor:@"country"];
}
       
/** Setter implementation for property countryLetterCode
 *
 */
- (void) setCountryLetterCode: (NSString *) value {
    _countryLetterCode = value;
    [self valueChangedFor:@"countryLetterCode"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property marketingNotificationEmails
 *
 */
- (void) setMarketingNotificationEmails: (NSMutableArray *) value {
    _marketingNotificationEmails = value;
    [self valueChangedFor:@"marketingNotificationEmails"];
}
       
/** Setter implementation for property onPremisesLastSyncDateTime
 *
 */
- (void) setOnPremisesLastSyncDateTime: (NSDate *) value {
    _onPremisesLastSyncDateTime = value;
    [self valueChangedFor:@"onPremisesLastSyncDateTime"];
}
       
/** Setter implementation for property onPremisesSyncEnabled
 *
 */
- (void) setOnPremisesSyncEnabled: (bool) value {
    _onPremisesSyncEnabled = value;
    [self valueChangedFor:@"onPremisesSyncEnabled"];
}
       
/** Setter implementation for property postalCode
 *
 */
- (void) setPostalCode: (NSString *) value {
    _postalCode = value;
    [self valueChangedFor:@"postalCode"];
}
       
/** Setter implementation for property preferredLanguage
 *
 */
- (void) setPreferredLanguage: (NSString *) value {
    _preferredLanguage = value;
    [self valueChangedFor:@"preferredLanguage"];
}
       
/** Setter implementation for property provisionedPlans
 *
 */
- (void) setProvisionedPlans: (NSMutableArray *) value {
    _provisionedPlans = value;
    [self valueChangedFor:@"provisionedPlans"];
}
       
/** Setter implementation for property securityComplianceNotificationMails
 *
 */
- (void) setSecurityComplianceNotificationMails: (NSMutableArray *) value {
    _securityComplianceNotificationMails = value;
    [self valueChangedFor:@"securityComplianceNotificationMails"];
}
       
/** Setter implementation for property securityComplianceNotificationPhones
 *
 */
- (void) setSecurityComplianceNotificationPhones: (NSMutableArray *) value {
    _securityComplianceNotificationPhones = value;
    [self valueChangedFor:@"securityComplianceNotificationPhones"];
}
       
/** Setter implementation for property state
 *
 */
- (void) setState: (NSString *) value {
    _state = value;
    [self valueChangedFor:@"state"];
}
       
/** Setter implementation for property street
 *
 */
- (void) setStreet: (NSString *) value {
    _street = value;
    [self valueChangedFor:@"street"];
}
       
/** Setter implementation for property technicalNotificationMails
 *
 */
- (void) setTechnicalNotificationMails: (NSMutableArray *) value {
    _technicalNotificationMails = value;
    [self valueChangedFor:@"technicalNotificationMails"];
}
       
/** Setter implementation for property verifiedDomains
 *
 */
- (void) setVerifiedDomains: (NSMutableArray *) value {
    _verifiedDomains = value;
    [self valueChangedFor:@"verifiedDomains"];
}
       

@end
