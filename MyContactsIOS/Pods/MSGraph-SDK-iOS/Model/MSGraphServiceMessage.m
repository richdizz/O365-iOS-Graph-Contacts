/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Corporation. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphServiceModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSGraphServiceMessage
 *
 */
@implementation MSGraphServiceMessage


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"receivedDateTime", @"receivedDateTime", @"sentDateTime", @"sentDateTime", @"hasAttachments", @"hasAttachments", @"subject", @"subject", @"body", @"body", @"bodyPreview", @"bodyPreview", @"importance", @"importance", @"parentFolderId", @"parentFolderId", @"sender", @"sender", @"from", @"from", @"toRecipients", @"toRecipients", @"ccRecipients", @"ccRecipients", @"bccRecipients", @"bccRecipients", @"replyTo", @"replyTo", @"conversationId", @"conversationId", @"uniqueBody", @"uniqueBody", @"isDeliveryReceiptRequested", @"isDeliveryReceiptRequested", @"isReadReceiptRequested", @"isReadReceiptRequested", @"isRead", @"isRead", @"isDraft", @"isDraft", @"webLink", @"webLink", @"attachments", @"attachments", @"createdDateTime", @"createdDateTime", @"lastModifiedDateTime", @"lastModifiedDateTime", @"changeKey", @"changeKey", @"categories", @"categories", @"id", @"_id", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.message";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {
		_receivedDateTime = (![dic objectForKey: @"receivedDateTime"] || [ [dic objectForKey: @"receivedDateTime"] isKindOfClass:[NSNull class]] )?_receivedDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"receivedDateTime"]];
		_sentDateTime = (![dic objectForKey: @"sentDateTime"] || [ [dic objectForKey: @"sentDateTime"] isKindOfClass:[NSNull class]] )?_sentDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"sentDateTime"]];
		_hasAttachments = (![dic objectForKey: @"hasAttachments"] || [ [dic objectForKey: @"hasAttachments"] isKindOfClass:[NSNull class]] )?_hasAttachments:[[dic objectForKey: @"hasAttachments"] boolValue];
		_subject = (![dic objectForKey: @"subject"] || [ [dic objectForKey: @"subject"] isKindOfClass:[NSNull class]] )?_subject:[[dic objectForKey: @"subject"] copy];
		_body = (![dic objectForKey: @"body"] || [ [dic objectForKey: @"body"] isKindOfClass:[NSNull class]] )?_body:[[MSGraphServiceItemBody alloc] initWithDictionary: [dic objectForKey: @"body"]];
		_bodyPreview = (![dic objectForKey: @"bodyPreview"] || [ [dic objectForKey: @"bodyPreview"] isKindOfClass:[NSNull class]] )?_bodyPreview:[[dic objectForKey: @"bodyPreview"] copy];
		_importance = (![dic objectForKey: @"importance"] || [ [dic objectForKey: @"importance"] isKindOfClass:[NSNull class]] )?_importance:[MSGraphServiceImportanceSerializer fromString:[dic objectForKey: @"importance"]];
		_parentFolderId = (![dic objectForKey: @"parentFolderId"] || [ [dic objectForKey: @"parentFolderId"] isKindOfClass:[NSNull class]] )?_parentFolderId:[[dic objectForKey: @"parentFolderId"] copy];
		_sender = (![dic objectForKey: @"sender"] || [ [dic objectForKey: @"sender"] isKindOfClass:[NSNull class]] )?_sender:[[MSGraphServiceRecipient alloc] initWithDictionary: [dic objectForKey: @"sender"]];
		_from = (![dic objectForKey: @"from"] || [ [dic objectForKey: @"from"] isKindOfClass:[NSNull class]] )?_from:[[MSGraphServiceRecipient alloc] initWithDictionary: [dic objectForKey: @"from"]];

        if([dic objectForKey: @"toRecipients"] != [NSNull null]){
            _toRecipients = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"toRecipients"]) {
                [_toRecipients addObject:[[MSGraphServiceRecipient alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_toRecipients resetChangedFlag];
        }
        

        if([dic objectForKey: @"ccRecipients"] != [NSNull null]){
            _ccRecipients = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"ccRecipients"]) {
                [_ccRecipients addObject:[[MSGraphServiceRecipient alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_ccRecipients resetChangedFlag];
        }
        

        if([dic objectForKey: @"bccRecipients"] != [NSNull null]){
            _bccRecipients = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"bccRecipients"]) {
                [_bccRecipients addObject:[[MSGraphServiceRecipient alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_bccRecipients resetChangedFlag];
        }
        

        if([dic objectForKey: @"replyTo"] != [NSNull null]){
            _replyTo = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"replyTo"]) {
                [_replyTo addObject:[[MSGraphServiceRecipient alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_replyTo resetChangedFlag];
        }
        
		_conversationId = (![dic objectForKey: @"conversationId"] || [ [dic objectForKey: @"conversationId"] isKindOfClass:[NSNull class]] )?_conversationId:[[dic objectForKey: @"conversationId"] copy];
		_uniqueBody = (![dic objectForKey: @"uniqueBody"] || [ [dic objectForKey: @"uniqueBody"] isKindOfClass:[NSNull class]] )?_uniqueBody:[[MSGraphServiceItemBody alloc] initWithDictionary: [dic objectForKey: @"uniqueBody"]];
		_isDeliveryReceiptRequested = (![dic objectForKey: @"isDeliveryReceiptRequested"] || [ [dic objectForKey: @"isDeliveryReceiptRequested"] isKindOfClass:[NSNull class]] )?_isDeliveryReceiptRequested:[[dic objectForKey: @"isDeliveryReceiptRequested"] boolValue];
		_isReadReceiptRequested = (![dic objectForKey: @"isReadReceiptRequested"] || [ [dic objectForKey: @"isReadReceiptRequested"] isKindOfClass:[NSNull class]] )?_isReadReceiptRequested:[[dic objectForKey: @"isReadReceiptRequested"] boolValue];
		_isRead = (![dic objectForKey: @"isRead"] || [ [dic objectForKey: @"isRead"] isKindOfClass:[NSNull class]] )?_isRead:[[dic objectForKey: @"isRead"] boolValue];
		_isDraft = (![dic objectForKey: @"isDraft"] || [ [dic objectForKey: @"isDraft"] isKindOfClass:[NSNull class]] )?_isDraft:[[dic objectForKey: @"isDraft"] boolValue];
		_webLink = (![dic objectForKey: @"webLink"] || [ [dic objectForKey: @"webLink"] isKindOfClass:[NSNull class]] )?_webLink:[[dic objectForKey: @"webLink"] copy];

        if([dic objectForKey: @"attachments"] != [NSNull null]){
            _attachments = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"attachments"]) {
                [_attachments addObject:[[MSGraphServiceAttachment alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_attachments resetChangedFlag];
        }
        
		self.createdDateTime = (![dic objectForKey: @"createdDateTime"] || [ [dic objectForKey: @"createdDateTime"] isKindOfClass:[NSNull class]] )?self.createdDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"createdDateTime"]];
		self.lastModifiedDateTime = (![dic objectForKey: @"lastModifiedDateTime"] || [ [dic objectForKey: @"lastModifiedDateTime"] isKindOfClass:[NSNull class]] )?self.lastModifiedDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"lastModifiedDateTime"]];
		self.changeKey = (![dic objectForKey: @"changeKey"] || [ [dic objectForKey: @"changeKey"] isKindOfClass:[NSNull class]] )?self.changeKey:[[dic objectForKey: @"changeKey"] copy];

        if([dic objectForKey: @"categories"] != [NSNull null]){
            self.categories = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"categories"]) {
                [self.categories addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)self.categories resetChangedFlag];
        }
        
		self._id = (![dic objectForKey: @"id"] || [ [dic objectForKey: @"id"] isKindOfClass:[NSNull class]] )?self._id:[[dic objectForKey: @"id"] copy];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = [MSOrcObjectizer stringFromDate:self.receivedDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"receivedDateTime"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.sentDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"sentDateTime"];}
	{[dic setValue: (self.hasAttachments?@"true":@"false") forKey: @"hasAttachments"];}
	{id curVal = [self.subject copy];if (curVal!=nil) [dic setValue: curVal forKey: @"subject"];}
	{id curVal = [self.body toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"body"];}
	{id curVal = [self.bodyPreview copy];if (curVal!=nil) [dic setValue: curVal forKey: @"bodyPreview"];}
	{[dic setValue: [MSGraphServiceImportanceSerializer toString:self.importance] forKey: @"importance"];}
	{id curVal = [self.parentFolderId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"parentFolderId"];}
	{id curVal = [self.sender toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"sender"];}
	{id curVal = [self.from toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"from"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.toRecipients) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"toRecipients"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.ccRecipients) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"ccRecipients"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.bccRecipients) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"bccRecipients"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.replyTo) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"replyTo"];}
	{id curVal = [self.conversationId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"conversationId"];}
	{id curVal = [self.uniqueBody toDictionary];if (curVal!=nil) [dic setValue: curVal forKey: @"uniqueBody"];}
	{[dic setValue: (self.isDeliveryReceiptRequested?@"true":@"false") forKey: @"isDeliveryReceiptRequested"];}
	{[dic setValue: (self.isReadReceiptRequested?@"true":@"false") forKey: @"isReadReceiptRequested"];}
	{[dic setValue: (self.isRead?@"true":@"false") forKey: @"isRead"];}
	{[dic setValue: (self.isDraft?@"true":@"false") forKey: @"isDraft"];}
	{id curVal = [self.webLink copy];if (curVal!=nil) [dic setValue: curVal forKey: @"webLink"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.attachments) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"attachments"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.createdDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"createdDateTime"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.lastModifiedDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"lastModifiedDateTime"];}
	{id curVal = [self.changeKey copy];if (curVal!=nil) [dic setValue: curVal forKey: @"changeKey"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.categories) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"categories"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"id"];}
    [dic setValue: @"#microsoft.graph.message" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{id curVal = self.receivedDateTime;
    if([self.updatedValues containsObject:@"receivedDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"receivedDateTime"];
            }
    }
	{id curVal = self.sentDateTime;
    if([self.updatedValues containsObject:@"sentDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"sentDateTime"];
            }
    }
 if([self.updatedValues containsObject:@"hasAttachments"])
            { [dic setValue: (self.hasAttachments?@"true":@"false") forKey: @"hasAttachments"];
}	{id curVal = self.subject;
    if([self.updatedValues containsObject:@"subject"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"subject"];
            }
    }
	{id curVal = self.body;
    if([self.updatedValues containsObject:@"body"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"body"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"body"];
            }
        
            }}
	{id curVal = self.bodyPreview;
    if([self.updatedValues containsObject:@"bodyPreview"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"bodyPreview"];
            }
    }
 if([self.updatedValues containsObject:@"importance"])
            { [dic setValue: [MSGraphServiceImportanceSerializer toString:self.importance] forKey: @"importance"];
}	{id curVal = self.parentFolderId;
    if([self.updatedValues containsObject:@"parentFolderId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"parentFolderId"];
            }
    }
	{id curVal = self.sender;
    if([self.updatedValues containsObject:@"sender"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"sender"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"sender"];
            }
        
            }}
	{id curVal = self.from;
    if([self.updatedValues containsObject:@"from"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"from"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"from"];
            }
        
            }}
	{id curVal = self.toRecipients;
    if([self.updatedValues containsObject:@"toRecipients"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"toRecipients"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.toRecipients) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"toRecipients"];
        }
        
            }}
	{id curVal = self.ccRecipients;
    if([self.updatedValues containsObject:@"ccRecipients"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"ccRecipients"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.ccRecipients) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"ccRecipients"];
        }
        
            }}
	{id curVal = self.bccRecipients;
    if([self.updatedValues containsObject:@"bccRecipients"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"bccRecipients"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.bccRecipients) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"bccRecipients"];
        }
        
            }}
	{id curVal = self.replyTo;
    if([self.updatedValues containsObject:@"replyTo"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"replyTo"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.replyTo) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"replyTo"];
        }
        
            }}
	{id curVal = self.conversationId;
    if([self.updatedValues containsObject:@"conversationId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"conversationId"];
            }
    }
	{id curVal = self.uniqueBody;
    if([self.updatedValues containsObject:@"uniqueBody"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal toDictionary] forKey: @"uniqueBody"];
            }
        else
    {
                
        NSDictionary *updatedDic=[curVal toUpdatedValuesDictionary];
        
            if(updatedDic!=nil && [updatedDic count]>0)
            {
                [dic setValue: [curVal toDictionary] forKey: @"uniqueBody"];
            }
        
            }}
 if([self.updatedValues containsObject:@"isDeliveryReceiptRequested"])
            { [dic setValue: (self.isDeliveryReceiptRequested?@"true":@"false") forKey: @"isDeliveryReceiptRequested"];
} if([self.updatedValues containsObject:@"isReadReceiptRequested"])
            { [dic setValue: (self.isReadReceiptRequested?@"true":@"false") forKey: @"isReadReceiptRequested"];
} if([self.updatedValues containsObject:@"isRead"])
            { [dic setValue: (self.isRead?@"true":@"false") forKey: @"isRead"];
} if([self.updatedValues containsObject:@"isDraft"])
            { [dic setValue: (self.isDraft?@"true":@"false") forKey: @"isDraft"];
}	{id curVal = self.webLink;
    if([self.updatedValues containsObject:@"webLink"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"webLink"];
            }
    }
	{id curVal = self.attachments;
    if([self.updatedValues containsObject:@"attachments"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"attachments"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.attachments) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"attachments"];
        }
        
            }}
	{id curVal = self.createdDateTime;
    if([self.updatedValues containsObject:@"createdDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"createdDateTime"];
            }
    }
	{id curVal = self.lastModifiedDateTime;
    if([self.updatedValues containsObject:@"lastModifiedDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"lastModifiedDateTime"];
            }
    }
	{id curVal = self.changeKey;
    if([self.updatedValues containsObject:@"changeKey"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"changeKey"];
            }
    }
	{id curVal = self.categories;
    if([self.updatedValues containsObject:@"categories"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"categories"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.categories) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"categories"];
        }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"id"];
            }
    }
    return dic;
}


/** Setter implementation for property receivedDateTime
 *
 */
- (void) setReceivedDateTime: (NSDate *) value {
    _receivedDateTime = value;
    [self valueChangedFor:@"receivedDateTime"];
}
       
/** Setter implementation for property sentDateTime
 *
 */
- (void) setSentDateTime: (NSDate *) value {
    _sentDateTime = value;
    [self valueChangedFor:@"sentDateTime"];
}
       
/** Setter implementation for property hasAttachments
 *
 */
- (void) setHasAttachments: (bool) value {
    _hasAttachments = value;
    [self valueChangedFor:@"hasAttachments"];
}
       
/** Setter implementation for property subject
 *
 */
- (void) setSubject: (NSString *) value {
    _subject = value;
    [self valueChangedFor:@"subject"];
}
       
/** Setter implementation for property body
 *
 */
- (void) setBody: (MSGraphServiceItemBody *) value {
    _body = value;
    [self valueChangedFor:@"body"];
}
       
/** Setter implementation for property bodyPreview
 *
 */
- (void) setBodyPreview: (NSString *) value {
    _bodyPreview = value;
    [self valueChangedFor:@"bodyPreview"];
}
       
/** Setter implementation for property importance
 *
 */
- (void) setImportance: (MSGraphServiceImportance) value {
    _importance = value;
    [self valueChangedFor:@"importance"];
}
       

- (void)setImportanceString:(NSString *)string {
        
    _importance = [MSGraphServiceImportanceSerializer fromString:string];
    [self valueChangedFor:@"importance"]; 
}

/** Setter implementation for property parentFolderId
 *
 */
- (void) setParentFolderId: (NSString *) value {
    _parentFolderId = value;
    [self valueChangedFor:@"parentFolderId"];
}
       
/** Setter implementation for property sender
 *
 */
- (void) setSender: (MSGraphServiceRecipient *) value {
    _sender = value;
    [self valueChangedFor:@"sender"];
}
       
/** Setter implementation for property from
 *
 */
- (void) setFrom: (MSGraphServiceRecipient *) value {
    _from = value;
    [self valueChangedFor:@"from"];
}
       
/** Setter implementation for property toRecipients
 *
 */
- (void) setToRecipients: (NSMutableArray *) value {
    _toRecipients = value;
    [self valueChangedFor:@"toRecipients"];
}
       
/** Setter implementation for property ccRecipients
 *
 */
- (void) setCcRecipients: (NSMutableArray *) value {
    _ccRecipients = value;
    [self valueChangedFor:@"ccRecipients"];
}
       
/** Setter implementation for property bccRecipients
 *
 */
- (void) setBccRecipients: (NSMutableArray *) value {
    _bccRecipients = value;
    [self valueChangedFor:@"bccRecipients"];
}
       
/** Setter implementation for property replyTo
 *
 */
- (void) setReplyTo: (NSMutableArray *) value {
    _replyTo = value;
    [self valueChangedFor:@"replyTo"];
}
       
/** Setter implementation for property conversationId
 *
 */
- (void) setConversationId: (NSString *) value {
    _conversationId = value;
    [self valueChangedFor:@"conversationId"];
}
       
/** Setter implementation for property uniqueBody
 *
 */
- (void) setUniqueBody: (MSGraphServiceItemBody *) value {
    _uniqueBody = value;
    [self valueChangedFor:@"uniqueBody"];
}
       
/** Setter implementation for property isDeliveryReceiptRequested
 *
 */
- (void) setIsDeliveryReceiptRequested: (bool) value {
    _isDeliveryReceiptRequested = value;
    [self valueChangedFor:@"isDeliveryReceiptRequested"];
}
       
/** Setter implementation for property isReadReceiptRequested
 *
 */
- (void) setIsReadReceiptRequested: (bool) value {
    _isReadReceiptRequested = value;
    [self valueChangedFor:@"isReadReceiptRequested"];
}
       
/** Setter implementation for property isRead
 *
 */
- (void) setIsRead: (bool) value {
    _isRead = value;
    [self valueChangedFor:@"isRead"];
}
       
/** Setter implementation for property isDraft
 *
 */
- (void) setIsDraft: (bool) value {
    _isDraft = value;
    [self valueChangedFor:@"isDraft"];
}
       
/** Setter implementation for property webLink
 *
 */
- (void) setWebLink: (NSString *) value {
    _webLink = value;
    [self valueChangedFor:@"webLink"];
}
       
/** Setter implementation for property attachments
 *
 */
- (void) setAttachments: (NSMutableArray *) value {
    _attachments = value;
    [self valueChangedFor:@"attachments"];
}
       

@end
