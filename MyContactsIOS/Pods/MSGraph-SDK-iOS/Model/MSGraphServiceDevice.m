/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Corporation. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphServiceModels.h"
#import "core/MSOrcObjectizer.h"


/** Implementation for MSGraphServiceDevice
 *
 */
@implementation MSGraphServiceDevice


@synthesize odataType = _odataType;


+ (NSDictionary *) $$$_$$$propertiesNamesMappings
{
    static NSDictionary *_$$$_$$$propertiesNamesMappings=nil; 
    
        if(_$$$_$$$propertiesNamesMappings==nil) {
    
        _$$$_$$$propertiesNamesMappings=[[NSDictionary alloc] initWithObjectsAndKeys:  @"accountEnabled", @"accountEnabled", @"alternativeSecurityIds", @"alternativeSecurityIds", @"approximateLastSignInDateTime", @"approximateLastSignInDateTime", @"deviceId", @"deviceId", @"deviceMetadata", @"deviceMetadata", @"deviceVersion", @"deviceVersion", @"displayName", @"displayName", @"isCompliant", @"isCompliant", @"isManaged", @"isManaged", @"onPremisesLastSyncDateTime", @"onPremisesLastSyncDateTime", @"onPremisesSyncEnabled", @"onPremisesSyncEnabled", @"operatingSystem", @"operatingSystem", @"operatingSystemVersion", @"operatingSystemVersion", @"physicalIds", @"physicalIds", @"trustType", @"trustType", @"registeredOwners", @"registeredOwners", @"registeredUsers", @"registeredUsers", @"id", @"_id", nil];
        
    }
    
    return _$$$_$$$propertiesNamesMappings;
}

- (instancetype)init {

	if (self = [super init]) {

		_odataType = @"#microsoft.graph.device";
        
    }

	return self;
}



- (instancetype) initWithDictionary: (NSDictionary *) dic {
    if((self = [self init])) {
        if(dic!=nil) {
		_accountEnabled = (![dic objectForKey: @"accountEnabled"] || [ [dic objectForKey: @"accountEnabled"] isKindOfClass:[NSNull class]] )?_accountEnabled:[[dic objectForKey: @"accountEnabled"] boolValue];

        if([dic objectForKey: @"alternativeSecurityIds"] != [NSNull null]){
            _alternativeSecurityIds = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"alternativeSecurityIds"]) {
                [_alternativeSecurityIds addObject:[[MSGraphServiceAlternativeSecurityId alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_alternativeSecurityIds resetChangedFlag];
        }
        
		_approximateLastSignInDateTime = (![dic objectForKey: @"approximateLastSignInDateTime"] || [ [dic objectForKey: @"approximateLastSignInDateTime"] isKindOfClass:[NSNull class]] )?_approximateLastSignInDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"approximateLastSignInDateTime"]];
		_deviceId = (![dic objectForKey: @"deviceId"] || [ [dic objectForKey: @"deviceId"] isKindOfClass:[NSNull class]] )?_deviceId:[[dic objectForKey: @"deviceId"] copy];
		_deviceMetadata = (![dic objectForKey: @"deviceMetadata"] || [ [dic objectForKey: @"deviceMetadata"] isKindOfClass:[NSNull class]] )?_deviceMetadata:[[dic objectForKey: @"deviceMetadata"] copy];
		_deviceVersion = (![dic objectForKey: @"deviceVersion"] || [ [dic objectForKey: @"deviceVersion"] isKindOfClass:[NSNull class]] )?_deviceVersion:[[dic objectForKey: @"deviceVersion"] intValue];
		_displayName = (![dic objectForKey: @"displayName"] || [ [dic objectForKey: @"displayName"] isKindOfClass:[NSNull class]] )?_displayName:[[dic objectForKey: @"displayName"] copy];
		_isCompliant = (![dic objectForKey: @"isCompliant"] || [ [dic objectForKey: @"isCompliant"] isKindOfClass:[NSNull class]] )?_isCompliant:[[dic objectForKey: @"isCompliant"] boolValue];
		_isManaged = (![dic objectForKey: @"isManaged"] || [ [dic objectForKey: @"isManaged"] isKindOfClass:[NSNull class]] )?_isManaged:[[dic objectForKey: @"isManaged"] boolValue];
		_onPremisesLastSyncDateTime = (![dic objectForKey: @"onPremisesLastSyncDateTime"] || [ [dic objectForKey: @"onPremisesLastSyncDateTime"] isKindOfClass:[NSNull class]] )?_onPremisesLastSyncDateTime:[MSOrcObjectizer dateFromString:[dic objectForKey: @"onPremisesLastSyncDateTime"]];
		_onPremisesSyncEnabled = (![dic objectForKey: @"onPremisesSyncEnabled"] || [ [dic objectForKey: @"onPremisesSyncEnabled"] isKindOfClass:[NSNull class]] )?_onPremisesSyncEnabled:[[dic objectForKey: @"onPremisesSyncEnabled"] boolValue];
		_operatingSystem = (![dic objectForKey: @"operatingSystem"] || [ [dic objectForKey: @"operatingSystem"] isKindOfClass:[NSNull class]] )?_operatingSystem:[[dic objectForKey: @"operatingSystem"] copy];
		_operatingSystemVersion = (![dic objectForKey: @"operatingSystemVersion"] || [ [dic objectForKey: @"operatingSystemVersion"] isKindOfClass:[NSNull class]] )?_operatingSystemVersion:[[dic objectForKey: @"operatingSystemVersion"] copy];

        if([dic objectForKey: @"physicalIds"] != [NSNull null]){
            _physicalIds = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"physicalIds"]) {
                [_physicalIds addObject:[object copy]];
            }
            
            [(MSOrcChangesTrackingArray *)_physicalIds resetChangedFlag];
        }
        
		_trustType = (![dic objectForKey: @"trustType"] || [ [dic objectForKey: @"trustType"] isKindOfClass:[NSNull class]] )?_trustType:[[dic objectForKey: @"trustType"] copy];

        if([dic objectForKey: @"registeredOwners"] != [NSNull null]){
            _registeredOwners = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"registeredOwners"]) {
                [_registeredOwners addObject:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_registeredOwners resetChangedFlag];
        }
        

        if([dic objectForKey: @"registeredUsers"] != [NSNull null]){
            _registeredUsers = [[MSOrcChangesTrackingArray alloc] init];
            
            for (id object in [dic objectForKey: @"registeredUsers"]) {
                [_registeredUsers addObject:[[MSGraphServiceDirectoryObject alloc] initWithDictionary: object]];
            }
            
            [(MSOrcChangesTrackingArray *)_registeredUsers resetChangedFlag];
        }
        
		self._id = (![dic objectForKey: @"id"] || [ [dic objectForKey: @"id"] isKindOfClass:[NSNull class]] )?self._id:[[dic objectForKey: @"id"] copy];
    }
    [self.updatedValues removeAllObjects];
    }
    
    return self;
}

- (NSDictionary *) toDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

	{[dic setValue: (self.accountEnabled?@"true":@"false") forKey: @"accountEnabled"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.alternativeSecurityIds) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"alternativeSecurityIds"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.approximateLastSignInDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"approximateLastSignInDateTime"];}
	{id curVal = [self.deviceId copy];if (curVal!=nil) [dic setValue: curVal forKey: @"deviceId"];}
	{id curVal = [self.deviceMetadata copy];if (curVal!=nil) [dic setValue: curVal forKey: @"deviceMetadata"];}
	{[dic setValue: [NSNumber numberWithInt: self.deviceVersion] forKey: @"deviceVersion"];}
	{id curVal = [self.displayName copy];if (curVal!=nil) [dic setValue: curVal forKey: @"displayName"];}
	{[dic setValue: (self.isCompliant?@"true":@"false") forKey: @"isCompliant"];}
	{[dic setValue: (self.isManaged?@"true":@"false") forKey: @"isManaged"];}
	{id curVal = [MSOrcObjectizer stringFromDate:self.onPremisesLastSyncDateTime];if (curVal!=nil) [dic setValue: curVal forKey: @"onPremisesLastSyncDateTime"];}
	{[dic setValue: (self.onPremisesSyncEnabled?@"true":@"false") forKey: @"onPremisesSyncEnabled"];}
	{id curVal = [self.operatingSystem copy];if (curVal!=nil) [dic setValue: curVal forKey: @"operatingSystem"];}
	{id curVal = [self.operatingSystemVersion copy];if (curVal!=nil) [dic setValue: curVal forKey: @"operatingSystemVersion"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.physicalIds) {
       [curVal addObject:[obj copy]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"physicalIds"];}
	{id curVal = [self.trustType copy];if (curVal!=nil) [dic setValue: curVal forKey: @"trustType"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredOwners) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"registeredOwners"];}
	{    NSMutableArray *curVal = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredUsers) {
       [curVal addObject:[obj toDictionary]];
    }
    
    if([curVal count]==0) curVal=nil;
if (curVal!=nil) [dic setValue: curVal forKey: @"registeredUsers"];}
	{id curVal = [self._id copy];if (curVal!=nil) [dic setValue: curVal forKey: @"id"];}
    [dic setValue: @"#microsoft.graph.device" forKey: @"@odata.type"];

    return dic;
}

- (NSDictionary *) toUpdatedValuesDictionary {
    
    NSMutableDictionary *dic=[[NSMutableDictionary alloc] init];

 if([self.updatedValues containsObject:@"accountEnabled"])
            { [dic setValue: (self.accountEnabled?@"true":@"false") forKey: @"accountEnabled"];
}	{id curVal = self.alternativeSecurityIds;
    if([self.updatedValues containsObject:@"alternativeSecurityIds"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"alternativeSecurityIds"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.alternativeSecurityIds) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"alternativeSecurityIds"];
        }
        
            }}
	{id curVal = self.approximateLastSignInDateTime;
    if([self.updatedValues containsObject:@"approximateLastSignInDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"approximateLastSignInDateTime"];
            }
    }
	{id curVal = self.deviceId;
    if([self.updatedValues containsObject:@"deviceId"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceId"];
            }
    }
	{id curVal = self.deviceMetadata;
    if([self.updatedValues containsObject:@"deviceMetadata"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"deviceMetadata"];
            }
    }
 if([self.updatedValues containsObject:@"deviceVersion"])
            { [dic setValue: [NSNumber numberWithInt: self.deviceVersion] forKey: @"deviceVersion"];
}	{id curVal = self.displayName;
    if([self.updatedValues containsObject:@"displayName"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"displayName"];
            }
    }
 if([self.updatedValues containsObject:@"isCompliant"])
            { [dic setValue: (self.isCompliant?@"true":@"false") forKey: @"isCompliant"];
} if([self.updatedValues containsObject:@"isManaged"])
            { [dic setValue: (self.isManaged?@"true":@"false") forKey: @"isManaged"];
}	{id curVal = self.onPremisesLastSyncDateTime;
    if([self.updatedValues containsObject:@"onPremisesLastSyncDateTime"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[MSOrcObjectizer stringFromDate:curVal] forKey: @"onPremisesLastSyncDateTime"];
            }
    }
 if([self.updatedValues containsObject:@"onPremisesSyncEnabled"])
            { [dic setValue: (self.onPremisesSyncEnabled?@"true":@"false") forKey: @"onPremisesSyncEnabled"];
}	{id curVal = self.operatingSystem;
    if([self.updatedValues containsObject:@"operatingSystem"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"operatingSystem"];
            }
    }
	{id curVal = self.operatingSystemVersion;
    if([self.updatedValues containsObject:@"operatingSystemVersion"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"operatingSystemVersion"];
            }
    }
	{id curVal = self.physicalIds;
    if([self.updatedValues containsObject:@"physicalIds"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj copy]];
    }
    
            [dic setValue: curArray forKey: @"physicalIds"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.physicalIds) {
       [curArray addObject:[obj copy]];
    }
    
                 [dic setValue: curArray forKey: @"physicalIds"];
        }
        
            }}
	{id curVal = self.trustType;
    if([self.updatedValues containsObject:@"trustType"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"trustType"];
            }
    }
	{id curVal = self.registeredOwners;
    if([self.updatedValues containsObject:@"registeredOwners"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"registeredOwners"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredOwners) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"registeredOwners"];
        }
        
            }}
	{id curVal = self.registeredUsers;
    if([self.updatedValues containsObject:@"registeredUsers"])
    {
            NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in curVal) {
       [curArray addObject:[obj toDictionary]];
    }
    
            [dic setValue: curArray forKey: @"registeredUsers"];
            }
        else
    {
                
        if(![curVal isKindOfClass:[MSOrcChangesTrackingArray class]] || [(MSOrcChangesTrackingArray *)curVal hasChanged])
        {
                NSMutableArray *curArray = [[NSMutableArray alloc] init];
    
    for(id obj in self.registeredUsers) {
       [curArray addObject:[obj toDictionary]];
    }
    
                 [dic setValue: curArray forKey: @"registeredUsers"];
        }
        
            }}
	{id curVal = self._id;
    if([self.updatedValues containsObject:@"id"])
    {
                [dic setValue: curVal==nil?[NSNull null]:[curVal copy] forKey: @"id"];
            }
    }
    return dic;
}


/** Setter implementation for property accountEnabled
 *
 */
- (void) setAccountEnabled: (bool) value {
    _accountEnabled = value;
    [self valueChangedFor:@"accountEnabled"];
}
       
/** Setter implementation for property alternativeSecurityIds
 *
 */
- (void) setAlternativeSecurityIds: (NSMutableArray *) value {
    _alternativeSecurityIds = value;
    [self valueChangedFor:@"alternativeSecurityIds"];
}
       
/** Setter implementation for property approximateLastSignInDateTime
 *
 */
- (void) setApproximateLastSignInDateTime: (NSDate *) value {
    _approximateLastSignInDateTime = value;
    [self valueChangedFor:@"approximateLastSignInDateTime"];
}
       
/** Setter implementation for property deviceId
 *
 */
- (void) setDeviceId: (NSString *) value {
    _deviceId = value;
    [self valueChangedFor:@"deviceId"];
}
       
/** Setter implementation for property deviceMetadata
 *
 */
- (void) setDeviceMetadata: (NSString *) value {
    _deviceMetadata = value;
    [self valueChangedFor:@"deviceMetadata"];
}
       
/** Setter implementation for property deviceVersion
 *
 */
- (void) setDeviceVersion: (int) value {
    _deviceVersion = value;
    [self valueChangedFor:@"deviceVersion"];
}
       
/** Setter implementation for property displayName
 *
 */
- (void) setDisplayName: (NSString *) value {
    _displayName = value;
    [self valueChangedFor:@"displayName"];
}
       
/** Setter implementation for property isCompliant
 *
 */
- (void) setIsCompliant: (bool) value {
    _isCompliant = value;
    [self valueChangedFor:@"isCompliant"];
}
       
/** Setter implementation for property isManaged
 *
 */
- (void) setIsManaged: (bool) value {
    _isManaged = value;
    [self valueChangedFor:@"isManaged"];
}
       
/** Setter implementation for property onPremisesLastSyncDateTime
 *
 */
- (void) setOnPremisesLastSyncDateTime: (NSDate *) value {
    _onPremisesLastSyncDateTime = value;
    [self valueChangedFor:@"onPremisesLastSyncDateTime"];
}
       
/** Setter implementation for property onPremisesSyncEnabled
 *
 */
- (void) setOnPremisesSyncEnabled: (bool) value {
    _onPremisesSyncEnabled = value;
    [self valueChangedFor:@"onPremisesSyncEnabled"];
}
       
/** Setter implementation for property operatingSystem
 *
 */
- (void) setOperatingSystem: (NSString *) value {
    _operatingSystem = value;
    [self valueChangedFor:@"operatingSystem"];
}
       
/** Setter implementation for property operatingSystemVersion
 *
 */
- (void) setOperatingSystemVersion: (NSString *) value {
    _operatingSystemVersion = value;
    [self valueChangedFor:@"operatingSystemVersion"];
}
       
/** Setter implementation for property physicalIds
 *
 */
- (void) setPhysicalIds: (NSMutableArray *) value {
    _physicalIds = value;
    [self valueChangedFor:@"physicalIds"];
}
       
/** Setter implementation for property trustType
 *
 */
- (void) setTrustType: (NSString *) value {
    _trustType = value;
    [self valueChangedFor:@"trustType"];
}
       
/** Setter implementation for property registeredOwners
 *
 */
- (void) setRegisteredOwners: (NSMutableArray *) value {
    _registeredOwners = value;
    [self valueChangedFor:@"registeredOwners"];
}
       
/** Setter implementation for property registeredUsers
 *
 */
- (void) setRegisteredUsers: (NSMutableArray *) value {
    _registeredUsers = value;
    [self valueChangedFor:@"registeredUsers"];
}
       

@end
