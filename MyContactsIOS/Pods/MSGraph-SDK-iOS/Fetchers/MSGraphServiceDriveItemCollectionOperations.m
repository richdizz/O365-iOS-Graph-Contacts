/*******************************************************************************
**NOTE** This code was generated by a tool and will occasionally be
overwritten. We welcome comments and issues regarding this code; they will be
addressed in the generation tool. If you wish to submit pull requests, please
do so for the templates in that tool.

This code was generated by Vipr (https://github.com/microsoft/vipr) using
the T4TemplateWriter (https://github.com/msopentech/vipr-t4templatewriter).

Copyright (c) Microsoft Corporation. All Rights Reserved.
Licensed under the Apache License 2.0; see LICENSE in the source repository
root for authoritative license information.ï»¿
******************************************************************************/



#import "MSGraphServiceDriveItem.h"
#import "MSGraphServiceFetchers.h"


/** Implementation for MSGraphServiceDriveItemCollectionOperations
 *
 */
@implementation MSGraphServiceDriveItemCollectionOperations

- (void)createLinkWithType:(NSString *)type scope:(NSString *)scope callback:(void (^)(MSGraphServicePermission *, MSOrcError*))callback {


      NSString *typeString = [NSString stringWithFormat:@"\"%@\"", type];

  NSString *scopeString = [NSString stringWithFormat:@"\"%@\"", scope];

    return [self createLinkRawWithType:typeString scope:scopeString callback:^(NSString *returnValue, MSOrcError *e) {
       
       if (e == nil) {
            MSGraphServicePermission * result = (MSGraphServicePermission *)[MSOrcObjectizer objectizeFromString:returnValue toType: [MSGraphServicePermission  class]];
            callback(result, e);
        } 
        else {

            callback(nil, e);
        }
    }];    
    
        
}

- (void)createLinkRawWithType:(NSString *)type scope:(NSString *)scope callback:(void (^)(NSString *, MSOrcError*))callback {
        
    id<MSOrcRequest> request = [super.resolver createOrcRequest];
    
    NSArray *parameters = [[NSArray alloc] initWithObjects: [[NSDictionary alloc] initWithObjectsAndKeys:  type, @"type", scope, @"scope", nil ] , nil];
    NSData* payload = [[MSOrcBaseContainer generatePayloadWithParameters:parameters dependencyResolver:self.resolver] dataUsingEncoding:NSUTF8StringEncoding];
    [request setContent:payload];
    
    [request setVerb:HTTP_VERB_POST];
	 	[request.url appendPathComponent:@"microsoft.graph.createLink"];
     	
    return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
        
		if (e == nil) {
            
			callback([[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding], e);
        }
        else {

            callback([[NSString alloc] initWithFormat:@"%d", response.status], e);
        }
    }];
    
    }
- (void)searchWithQ:(NSString *)q callback:(void (^)(MSGraphServiceDriveItem *, MSOrcError*))callback {


	id<MSOrcRequest> request = [self.resolver createOrcRequest];
	NSDictionary *params = [[NSDictionary alloc] initWithObjectsAndKeys:  q, @"q", nil ] ;
	
	NSString *parameters = [MSOrcBaseContainer getFunctionParameters:params];

	[request.url appendPathComponent:[[NSString alloc] initWithFormat:@"search(%@)",parameters]];
	[request setVerb:HTTP_VERB_POST];

	return [super orcExecuteRequest:request callback:^(id<MSOrcResponse> response, MSOrcError *e) {
       
        if (e == nil) {
            MSGraphServiceDriveItem * result = (MSGraphServiceDriveItem *)[MSOrcObjectizer objectizeFromString:[[NSString alloc] initWithData:response.data encoding:NSUTF8StringEncoding] toType: [MSGraphServiceDriveItem  class]];
            callback(result, e);
        }
        else {

            callback(nil, e);
        }
        
    }];
    
        
}


@end
